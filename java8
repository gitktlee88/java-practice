<> List.of vs Arrays.asList

1, List.of can be best used when data set is less and unchanged, while 
   Arrays.asList can be used best in case of large and dynamic data set.

2, List.of take very less overhead space because it has field-based implementation and consume less heap space, 
   both in terms of fixed overhead and on a per-element basis. 
   while Arrays.asList take more overhead space because while initialization it creates more objects in heap.

3, Collection returned by List.of is immutable and hence thread-safe while 
   Collection returned by Arrays.asList is mutable and not thread safe. 
   (Immutable collection instances generally consume much less memory than their mutable counterparts.)

4, List.of doesn't allow null elements while Arrays.asList allows null elements.

<> What is double colon (::) operator in Java 8 - Example
The double colon (::) operator is known as the method reference in Java 8. 
Method references are expressions which have the same treatment as a lambda expression, 
but instead of providing a lambda body, they refer to an existing method by name. 

For example, to print all elements of the list you can use the forEach() method as follows

list.stream.forEach( s-> System.out.println(s));

but here you can replace lambda expression with method reference to improve readability as shown below:

list.stream.forEach( System.out::println);

You can use method reference or double colon operator to refer a static method, an instance method, or a constructor.
